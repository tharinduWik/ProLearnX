{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 120000 // Increase timeout to 120 seconds (2 minutes)\n});\n\n// Add request interceptor to include auth token if available\napiClient.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  console.log(`Making ${config.method.toUpperCase()} request to: ${config.url}`);\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for better error handling\napiClient.interceptors.response.use(response => {\n  console.log(`Successful response from: ${response.config.url}`);\n  return response;\n}, error => {\n  console.error('API Error:', error);\n\n  // Specific handling for timeout errors\n  if (error.code === 'ECONNABORTED') {\n    console.error('Request timeout. The server is taking too long to respond.');\n    error.friendlyMessage = 'Request timed out. Please try again later.';\n  } else if (error.response) {\n    // The request was made and the server responded with a status code\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n\n    // Handle MongoDB connection issues (503 Service Unavailable)\n    if (error.response.status === 503) {\n      error.friendlyMessage = 'The database is currently unavailable. Our team has been notified.';\n    }\n\n    // Log more detailed MongoDB errors if present\n    if (typeof error.response.data === 'string' && (error.response.data.includes('MongoDB') || error.response.data.includes('SSLException'))) {\n      console.error('MongoDB Connection Error Detected');\n      error.friendlyMessage = 'Database connection error occurred. Please try again later.';\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('No response received:', error.request);\n    error.friendlyMessage = 'Unable to connect to the server. Please check your internet connection.';\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Request error:', error.message);\n    error.friendlyMessage = 'An error occurred while processing your request.';\n  }\n  return Promise.reject(error);\n});\nexport const userService = {\n  register: userData => apiClient.post('/users/register', userData),\n  login: (email, password) => apiClient.post(`/users/login?email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`),\n  getUser: userId => apiClient.get(`/users/${userId}`),\n  updateUser: (userId, userData) => apiClient.put(`/users/${userId}`, userData)\n};\nexport const postService = {\n  createPost: formData => {\n    console.log(\"Creating post with form data:\", formData);\n    // Set longer timeout for file uploads (3 minutes)\n    return axios.post(`${API_URL}/posts`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 180000,\n      // 3 minutes for file uploads\n      onUploadProgress: progressEvent => {\n        // Optional progress tracking\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        console.log(`Upload progress: ${percentCompleted}%`);\n      }\n    });\n  },\n  // New method for creating posts with pre-uploaded media URLs\n  createPostWithUrls: postData => {\n    console.log(\"Creating post with URLs:\", postData);\n    return apiClient.post('/posts/with-urls', JSON.stringify(postData), {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 90000 // 90 seconds specifically for this operation\n    });\n  },\n  getAllPosts: () => apiClient.get('/posts'),\n  getUserPosts: userId => apiClient.get(`/posts/user/${userId}`),\n  getPost: postId => apiClient.get(`/posts/${postId}`),\n  deletePost: postId => apiClient.delete(`/posts/${postId}`)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","console","log","method","toUpperCase","url","error","Promise","reject","response","code","friendlyMessage","data","status","includes","message","userService","register","userData","post","login","email","password","encodeURIComponent","getUser","userId","get","updateUser","put","postService","createPost","formData","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","createPostWithUrls","postData","stringify","getAllPosts","getUserPosts","getPost","postId","deletePost","delete"],"sources":["D:/Projects/PAF Project/ProLearnXGit3/ProLearnX/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\n// Create axios instance with base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  timeout: 120000 // Increase timeout to 120 seconds (2 minutes)\r\n});\r\n\r\n// Add request interceptor to include auth token if available\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    console.log(`Making ${config.method.toUpperCase()} request to: ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor for better error handling\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Successful response from: ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    \r\n    // Specific handling for timeout errors\r\n    if (error.code === 'ECONNABORTED') {\r\n      console.error('Request timeout. The server is taking too long to respond.');\r\n      error.friendlyMessage = 'Request timed out. Please try again later.';\r\n    } else if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      \r\n      // Handle MongoDB connection issues (503 Service Unavailable)\r\n      if (error.response.status === 503) {\r\n        error.friendlyMessage = 'The database is currently unavailable. Our team has been notified.';\r\n      }\r\n      \r\n      // Log more detailed MongoDB errors if present\r\n      if (typeof error.response.data === 'string' && \r\n          (error.response.data.includes('MongoDB') || error.response.data.includes('SSLException'))) {\r\n        console.error('MongoDB Connection Error Detected');\r\n        error.friendlyMessage = 'Database connection error occurred. Please try again later.';\r\n      }\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error('No response received:', error.request);\r\n      error.friendlyMessage = 'Unable to connect to the server. Please check your internet connection.';\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error('Request error:', error.message);\r\n      error.friendlyMessage = 'An error occurred while processing your request.';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const userService = {\r\n  register: (userData) => apiClient.post('/users/register', userData),\r\n  login: (email, password) => apiClient.post(`/users/login?email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`),\r\n  getUser: (userId) => apiClient.get(`/users/${userId}`),\r\n  updateUser: (userId, userData) => apiClient.put(`/users/${userId}`, userData)\r\n};\r\n\r\nexport const postService = {\r\n  createPost: (formData) => {\r\n    console.log(\"Creating post with form data:\", formData);\r\n    // Set longer timeout for file uploads (3 minutes)\r\n    return axios.post(`${API_URL}/posts`, formData, {\r\n      headers: { \r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      timeout: 180000, // 3 minutes for file uploads\r\n      onUploadProgress: (progressEvent) => {\r\n        // Optional progress tracking\r\n        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        console.log(`Upload progress: ${percentCompleted}%`);\r\n      }\r\n    });\r\n  },\r\n  \r\n  // New method for creating posts with pre-uploaded media URLs\r\n  createPostWithUrls: (postData) => {\r\n    console.log(\"Creating post with URLs:\", postData);\r\n    return apiClient.post('/posts/with-urls', JSON.stringify(postData), {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      timeout: 90000 // 90 seconds specifically for this operation\r\n    });\r\n  },\r\n  \r\n  getAllPosts: () => apiClient.get('/posts'),\r\n  getUserPosts: (userId) => apiClient.get(`/posts/user/${userId}`),\r\n  getPost: (postId) => apiClient.get(`/posts/${postId}`),\r\n  deletePost: (postId) => apiClient.delete(`/posts/${postId}`)\r\n};\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}